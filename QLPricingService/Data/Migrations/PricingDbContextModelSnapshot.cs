// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLPricingService.Data;

#nullable disable

namespace QLPricingService.Data.Migrations
{
    [DbContext(typeof(PricingDbContext))]
    partial class PricingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("QLPricingService.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalFreeDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GlobalFreeDays = 0,
                            Name = "Customer X"
                        },
                        new
                        {
                            Id = 2,
                            GlobalFreeDays = 200,
                            Name = "Customer Y"
                        });
                });

            modelBuilder.Entity("QLPricingService.Domain.CustomerServiceUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CustomerSpecificPricePerDay")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CustomerServiceUsages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            ServiceId = 1,
                            StartDate = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            ServiceId = 3,
                            StartDate = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            ServiceId = 2,
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 2,
                            ServiceId = 3,
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("QLPricingService.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5, 4)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            EndDate = new DateTime(2019, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 0.20m,
                            ServiceId = 3,
                            StartDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            EndDate = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 0.30m,
                            ServiceId = 2,
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            EndDate = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Percentage = 0.30m,
                            ServiceId = 3,
                            StartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("QLPricingService.Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BasePricePerDay")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("ChargesOnWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePricePerDay = 0.2m,
                            ChargesOnWeekends = false,
                            Name = "Service A"
                        },
                        new
                        {
                            Id = 2,
                            BasePricePerDay = 0.24m,
                            ChargesOnWeekends = false,
                            Name = "Service B"
                        },
                        new
                        {
                            Id = 3,
                            BasePricePerDay = 0.4m,
                            ChargesOnWeekends = true,
                            Name = "Service C"
                        });
                });

            modelBuilder.Entity("QLPricingService.Domain.CustomerServiceUsage", b =>
                {
                    b.HasOne("QLPricingService.Domain.Customer", "Customer")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLPricingService.Domain.Service", "Service")
                        .WithMany("CustomerUsages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("QLPricingService.Domain.Discount", b =>
                {
                    b.HasOne("QLPricingService.Domain.Customer", "Customer")
                        .WithMany("Discounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLPricingService.Domain.Service", "Service")
                        .WithMany("Discounts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("QLPricingService.Domain.Customer", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("ServiceUsages");
                });

            modelBuilder.Entity("QLPricingService.Domain.Service", b =>
                {
                    b.Navigation("CustomerUsages");

                    b.Navigation("Discounts");
                });
#pragma warning restore 612, 618
        }
    }
}
